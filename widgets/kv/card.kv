<CustomCard>
    adaptive_height: True
    # adaptive_width: True
    size_hint_x: 1
    pos_hint: {"center_y": 0.5, "center_x": 0.5}
    radius: [dp(10)]
    md_bg_color:  (1, 1, 1, (1 if root.border else 0))
    padding: dp(20), dp(20), dp(20), dp(20)
    on_release: self.on_click()
    ripple_behavior: True
    canvas.before:
        Color:
            rgba: (0, 0, 0, (0.2 if root.border else 0)) # Border color (Black with 20% opacity)
        Line:
            width: dp(1) if root.border else dp(0.1) # Border thickness
            rounded_rectangle: (self.x, self.y, self.width, self.height, dp(10) if root.border else dp(0))  # Rounded borders
    MDBoxLayout:
        orientation: "vertical"
        spacing: dp(10)
        size_hint: 1, None
        adaptive_height: True
        # adaptive_width: True
        MDIcon:
            id: icon_widget
            icon: root.icon #"landslide"
            pos_hint: {"center_x": .5, "center_y": .5}
            font_size: dp(75) 
            theme_text_color: "Custom"
            text_color: root.color + ([1] if root.status else [0.1])
        MDBoxLayout:
            orientation: "vertical"
            size_hint: 1, None
            adaptive_height: True
            MDLabel:
                text: root.text
                halign: "center"    
                size_hint_y: None
                height: self.texture_size[1] # Adjust height dynamically
                font_size: dp(12)
            MDLabel:
                text: root.description if root.description else ""
                size_hint_y: None
                height: self.texture_size[1] # Adjust height dynamically
                halign: "center"
                font_size: "9sp"
                disabled: True


<CustomCircularCard>
    ripple_behavior: True
    adaptive_height: True
    size_hint: 1, None
    pos_hint: {"center_y": 0.5, "center_x": 0.5}
    radius: [dp(10)]
    md_bg_color:  (1, 1, 1, (1 if root.border else 0))
    on_release: self.on_click()
    canvas.before:
        Color:
            rgba: (0, 0, 0, (0.2 if root.border else 0)) # Border color (Black with 20% opacity)
        Line:
            width: dp(1) if root.border else dp(0.1) # Border thickness
            rounded_rectangle: (self.x, self.y, self.width, self.height, dp(10) if root.border else dp(0))  # Rounded borders
    MDBoxLayout:
        adaptive_height: True
        orientation: "vertical"
        size_hint: 1, None
        padding: dp(30), dp(20)
        spacing: dp(10)
        AnchorLayout:
            id: arc_layout  
            size_hint: 1, None
            height: self.width
            canvas.before:
                Color:
                    rgba: root.color + [0.3]#root.bar_color + [0.3]
                Line:
                    width: dp(5)#root.bar_width
                    ellipse: (self.x, self.y, self.width, self.height, 180, 360 + 90)
            canvas.after:
                Color:
                    rgb: root.color #root.bar_color + [0.3]
                Line:
                    width: dp(5)#root.bar_width
                    ellipse: (self.x, self.y, self.width, self.height, 180, ((root.value / root.max_value)  * 270) + 180)
            MDBoxLayout:
                orientation: "horizontal"
                adaptive_height: True
                adaptive_width: True
                size_hint: None, None 
                spacing: dp(2)
                MDLabel:
                    id: value_label
                    text: str(root.value) #"1040 PPM"
                    theme_text_color: "Hint"
                    size_hint_x: None
                    adaptive_width: True
                    valign: "center"
                    font_size: "18sp"
                MDLabel:
                    text: root.unit #"PPM"
                    theme_text_color: "Hint"
                    size_hint_x: None
                    adaptive_width: True
                    valign: "top"
                    font_size: "8sp"
        MDLabel:
            text: root.text
            halign: "center"    
            size_hint_y: None
            height: self.texture_size[1] # Adjust height dynamically
            font_size: dp(12)


